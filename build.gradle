/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/custom_plugins.html
 */

import org.gradle.util.VersionNumber

plugins {
  // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
  id 'java-gradle-plugin'

  // Apply the Groovy plugin to add support for Groovy
  id 'groovy'

  // Add maven publishing plugin for testing with local maven repository
  id 'maven-publish'

  // publishing plugin
  id 'com.gradle.plugin-publish' version '0.12.0'
}

repositories {
  // Use maven central for resolving dependencies.
  // You can declare any Maven/Ivy/file repository here.
  mavenCentral()

  maven {
    url 'https://plugins.gradle.org/m2/'
  }
}

def jettyVersion = '9.4.35.v20201120'

dependencies {
  implementation(gradleApi())
  implementation 'com.github.node-gradle:gradle-node-plugin:2.2.4'
  implementation "org.eclipse.jetty:jetty-server:${jettyVersion}"
  implementation "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
  implementation 'com.sun.xml.bind:jaxb-osgi:2.2.4-1'
  implementation 'com.google.guava:guava:29.0-jre'
  implementation 'org.codehaus.groovy:groovy-yaml:3.0.5'
  implementation 'io.swagger.core.v3:swagger-gradle-plugin:2.1.7'
  implementation 'org.scm-manager:gradle-license-plugin:0.7.1'
  implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0'
  implementation 'org.scm-manager.changelog:gradle-plugin:0.2.0'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
  testImplementation 'org.assertj:assertj-core:3.11.1'
}

project.tasks.withType(GroovyCompile) {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

project.tasks.withType(JavaCompile) {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

test {
  useJUnitPlatform()
}

gradlePlugin {
  // Define the plugin
  plugins {
    smpPlugin {
      id = 'org.scm-manager.smp'
      implementationClass = 'com.cloudogu.smp.GradleSmpPlugin'
    }
  }
}

// Add a source set for the functional test suite
sourceSets {
  functionalTest {
  }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  useJUnitPlatform()
}

check {
  // Run the functional tests as part of `check`
  dependsOn(tasks.functionalTest)
}

// publish plugin
pluginBundle {
  website = 'https://scm-manager.org'
  vcsUrl = 'https://github.com/scm-manager/gradle-smp-plugin'
  description = 'Plugin to build and test SCM-Manager plugins'
  tags = ['scm-manager', 'smp', 'plugin']

  plugins {
    smpPlugin {
      displayName = 'Gradle SCM-Manager Plugin'
    }
  }
}

// release tasks

task setVersion {
  doLast {
    if (!project.hasProperty('newVersion')) {
      throw new GradleException('usage setVersion -PnewVersion=x.y.z')
    }

    String version = project.property('newVersion')
    setVersion(version)
  }
}

task setVersionToNextSnapshot {
  doLast {
    VersionNumber v = VersionNumber.parse(project.version)
    String version = "${v.major}.${v.minor}.${v.micro + 1}-SNAPSHOT"
    setVersion(version)
  }
}

task printVersion {
  doLast {
    println project.version
  }
}

def setVersion(String version) {
  Properties properties = new Properties()

  File propertiesFile = new File(project.rootDir, 'gradle.properties')
  propertiesFile.withInputStream { stream ->
    properties.load(stream)
  }

  if (properties.version == version) {
    println "project uses already version ${version}"
    return
  }

  println "set version from ${properties.version} to ${version}"

  properties.version = version
  propertiesFile.withOutputStream { stream ->
    properties.store(stream, 'gradle properties')
  }
}
